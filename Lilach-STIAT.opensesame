# Generated by OpenSesame 2.9.7 (Hesitant Heisenberg)
# Mon Sep 21 12:18:55 2015 (nt)
# <http://www.cogsci.nl/opensesame>

set background "black"
set bidi "yes"
set canvas_backend "legacy"
set compensation "0"
set coordinates "relative"
set description "A template containing a practice and an experimental phase"
set enable_escape "no"
set expyriment_opengl "yes"
set font_bold "no"
set font_family "hebrew"
set font_italic "no"
set font_size "18"
set foreground "white"
set height "768"
set keyboard_backend "legacy"
set mouse_backend "legacy"
set pygame_hwsurface "yes"
set pygame_window_frame "no"
set pygame_window_pos "0,0"
set sampler_backend "legacy"
set start "experiment"
set subject_nr "0"
set subject_parity "even"
set synth_backend "legacy"
set title "ST-IAT Cognition"
set width "1024"

define sequence Behav_seq
	run init_Behav "always"
	run IAT_seq "always"

define inline_script Block_left
	set _prepare ""
	___run__
	stim_words = []
	sara_n = []
	positive_n = []
	negative_n = []
	
	#Where is Sara?
	#Sara is on the right
	sara_loc = "left"
	
	
	#create Positive list of 16 stimuli
	positive_n.extend(positive)
	#len(positive_n) == 4
	positive_n.extend(positive)
	#len(positive_n) == 8
	positive_n.extend(positive)
	#len(positive_n) == 12
	positive_n.extend(positive)
	#len(positive_n) == 16
	
	
	#create Negative list of 10 stimuli
	negative_n.extend(negative)
	#len(negative_n) == 4
	negative_n.extend(negative)
	#len(negative_n) == 8
	negative_n.extend(random.sample(negative, 2))
	#len(negative_n) == 10
	
	#create Sara list of 10 stimuli
	sara_n.extend(sara)
	#len(sara_n) == 4
	sara_n.extend(sara)
	#len(sara_n) == 8
	sara_n.extend(random.sample(sara, 2))
	#len(sara_n) == 10
	
	
	#create and shuffle joint stimuli list
	random.shuffle(positive_n)
	random.shuffle(negative_n)
	random.shuffle(sara_n)
	stim_words.extend(positive_n)
	stim_words.extend(negative_n)
	stim_words.extend(sara_n)
	random.shuffle(stim_words)
	
	#create iterator
	i = 0
	
	#store length of stimuli list for repeat count
	exp.set("stim_len",len(stim_words))
	
	#store location of Sara for correct_response, and category labels
	if sara_loc == "right":
		exp.set("left_cat","")
		exp.set("right_cat",u'U+05E9U+05E8U+05D4')
		sara_correct = "i"
	elif sara_loc == "left":
		exp.set("left_cat",u'U+05E9U+05E8U+05D4')
		exp.set("right_cat","")
		sara_correct = "e"
	else:
		exp.set("left_cat","")
		exp.set("right_cat","")
		sara_correct = " "
	__end__

define inline_script Block_right
	set _prepare ""
	___run__
	stim_words = []
	sara_n = []
	positive_n = []
	negative_n = []
	
	#Where is Sara?
	#Sara is on the right
	sara_loc = "right"
	
	
	#create Positive list of 10 stimuli
	positive_n.extend(positive)
	#len(positive_n) == 4
	positive_n.extend(positive)
	#len(positive_n) == 8
	positive_n.extend(random.sample(positive, 2))
	#len(positive_n) == 10
	
	#create Negative list of 16 stimuli
	negative_n.extend(negative)
	#len(negative_n) == 4
	negative_n.extend(negative)
	#len(negative_n) == 8
	negative_n.extend(negative)
	#len(negative_n) == 12
	negative_n.extend(negative)
	#len(negative_n) == 16
	
	#create Sara list of 10 stimuli
	sara_n.extend(sara)
	#len(sara_n) == 4
	sara_n.extend(sara)
	#len(sara_n) == 8
	sara_n.extend(random.sample(sara, 2))
	#len(sara_n) == 10
	
	
	#create and shuffle joint stimuli list
	random.shuffle(positive_n)
	random.shuffle(negative_n)
	random.shuffle(sara_n)
	stim_words.extend(positive_n)
	stim_words.extend(negative_n)
	stim_words.extend(sara_n)
	random.shuffle(stim_words)
	
	#create iterator
	i = 0
	
	#store length of stimuli list for repeat count
	exp.set("stim_len",len(stim_words))
	
	#store location of Sara for correct_response, and category labels
	if sara_loc == "right":
		exp.set("left_cat","")
		exp.set("right_cat",u'U+05E9U+05E8U+05D4')
		sara_correct = "i"
	elif sara_loc == "left":
		exp.set("left_cat",u'U+05E9U+05E8U+05D4')
		exp.set("right_cat","")
		sara_correct = "e"
	else:
		exp.set("left_cat","")
		exp.set("right_cat","")
		sara_correct = " "
	__end__

define inline_script Check_ENG
	set _prepare ""
	___run__
	if self.get('correct') == 1:
		exp.set('eng_set',1)
	else:
		exp.set('eng_set',0)
	__end__

define sequence Cog_seq
	run init_cog "always"
	run IAT_seq "always"

define inline_script Def_functions
	___prepare__
	import subprocess
	from multiprocessing import Process
	from time import sleep
	
	NirPath = exp.get_file("nircmdc.exe")
	
	def front(windowsname):
		subprocess.Popen(NirPath + ' win activate title "%s"' % windowsname)
		print('Window "%s" is in front!' % windowsname)
	
	def processExists(processname):
		tlcall = 'TASKLIST', '/FI', 'imagename eq %s' % processname
		# shell=True hides the shell window, stdout to PIPE enables
		# communicate() to get the tasklist command result
		tlproc = subprocess.Popen(tlcall, shell=True, stdout=subprocess.PIPE)
		# trimming it to the actual lines with information
		tlout = tlproc.communicate()[0].strip().split('\r\n')
		# if TASKLIST returns single line without processname: it's not running
		if len(tlout) > 1 and processname in tlout[-1]:
			print('process "%s" is running!' % processname)
			return True
		else:
			print(tlout[0])
			print('process "%s" is NOT running!' % processname)
			return False
	
	def qualIE():
		subprocess.Popen('"C:\\Program Files\\Internet Explorer\\iexplore.exe" -k https://bgupsych.eu.qualtrics.com/SE/?SID=SV_3m8S4B7Hl1MJWKh&subj=' + str(self.get('subject_nr')) + '&ys=' + str(self.get('ys')) + '&impf=' + str(self.get('impf')))
		print('qualIE ran')
		front('qualtrics')
		existReps = 0
		while(processExists('iexplore.exe')):
			print('existReps:\n')
			print(existReps)
			existReps = existReps + 1
			print('process is running!')
			sleep(1)
	__end__
	set _run ""

define inline_script Demographics
	set _prepare ""
	___run__
	p = Process(target=qualIE)
	p.run()
	sleep(2)
	
	print('process not running!')
	front('Backend')
	__end__

define sequence Emo_seq
	run init_Emo "always"
	run IAT_seq "always"

define sketchpad Fixation
	set description "Displays stimuli"
	set duration "495"
	set reset_variables "no"
	draw fixdot 0 0 color="white" style="default" z_index=0 show_if="always"
	draw textline 256 -192 "U+05D7U+05D9U+05D5U+05D1U+05D9" center=1 color="white" font_family="hebrew" font_size=28 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline -256 -192 "U+05E9U+05DCU+05D9U+05DCU+05D9" center=1 color="white" font_family="hebrew" font_size=28 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline -256 -160 "[left_cat]" center=1 color="#00ffff" font_family="hebrew" font_size=28 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 256 -160 "[right_cat]" center=1 color="#00ffff" font_family="hebrew" font_size=28 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"

define sequence IAT_Blocks_Seq
	run Sara_right_block_sequence "=self.get('pf') == 1"
	run Sara_left_block_sequence "=self.get('pf') == 1"
	run Sara_left_block_sequence "=self.get('pf') == 0"
	run Sara_right_block_sequence "=self.get('pf') == 0"

define loop IAT_Blocks_loop
	set break_if "never"
	set column_order "practice"
	set cycles "2"
	set item "IAT_Blocks_Seq"
	set order "sequential"
	set repeat "1"
	set skip "0"
	setcycle 0 practice "no"
	setcycle 1 practice "no"
	run IAT_Blocks_Seq

define feedback IAT_inst1_fb
	set duration "0"
	set reset_variables "no"
	set start_response_interval "no"
	draw textline 263 -102 "U+05D7U+05D9U+05D5U+05D1U+05D9:" center=1 color="white" font_family="Alef" font_size=21 font_bold="yes" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 269 -72 "U+05E9U+05DCU+05D9U+05DCU+05D9:" center=1 color="white" font_family="Alef" font_size=21 font_bold="yes" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 255 54 "U+05E9U+05E8U+05D4:" center=1 color="#00ffff" font_family="Alef" font_size=21 font_bold="yes" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline -23 -102 "[p1], [p2], [p3], [p4]" center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline -43 -72 "[n1], [n2], [n3], [n4]" center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 -252 "U+05D1U+05D7U+05DCU+05E7 U+05D6U+05D4 U+05EAU+05EAU+05D1U+05E7U+05E9U+05D5 U+05DCU+05DEU+05D9U+05D9U+05DF U+05DEU+05D9U+05DCU+05D9U+05DD U+05D0U+05D5 U+05EAU+05DEU+05D5U+05E0U+05D5U+05EA U+05DCU+05E7U+05D8U+05D2U+05D5U+05E8U+05D9U+05D5U+05EA. U+05D4U+05E9U+05EAU+05D3U+05DCU+05D5" center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 10 -222 "U+05DCU+05D1U+05E6U+05E2 U+05D0U+05EA U+05D4U+05DEU+05E9U+05D9U+05DEU+05D4 U+05DEU+05D4U+05E8 U+05DBU+05DBU+05DC U+05D4U+05D0U+05E4U+05E9U+05E8, U+05D0U+05D1U+05DC U+05E2U+05DD U+05DBU+05DEU+05D4 U+05E9U+05E4U+05D7U+05D5U+05EA U+05D8U+05E2U+05D5U+05D9U+05D5U+05EA. " center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 6 -192 "U+05D0U+05E0U+05D0 U+05E2U+05D9U+05D1U+05E8U+05D5 U+05E2U+05DC U+05D4U+05D4U+05E0U+05D7U+05D9U+05D5U+05EA U+05D1U+05D6U+05D4U+05D9U+05E8U+05D5U+05EA U+05E8U+05D1U+05D4:" center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 64 -132 "U+05DCU+05D4U+05DCU+05DF U+05E8U+05E9U+05D9U+05DEU+05D4 U+05E9U+05DC U+05E9U+05DEU+05D5U+05EA U+05E9U+05DC U+05E7U+05D8U+05D2U+05D5U+05E8U+05D9U+05D5U+05EA U+05D5U+05DEU+05D9U+05DCU+05D9U+05DD U+05D0U+05D5 U+05EAU+05DEU+05D5U+05E0U+05D5U+05EA U+05E9U+05DEU+05EAU+05D0U+05D9U+05DEU+05D5U+05EA U+05DCU+05D4U+05DF:" center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 10 54 "U+05E9U+05E8U+05D4, U+05D7U+05D5U+05DCU+05EA U+05D0U+05DCU+05E6U+05D4U+05D9U+05D9U+05DEU+05E8" center=1 color="#00ffff" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 45 144 "U+05D4U+05E0U+05D9U+05D7U+05D5 U+05D0U+05EA U+05D4U+05D0U+05E6U+05D1U+05E2 U+05D4U+05DEU+05D5U+05E8U+05D4 U+05D1U+05DBU+05DC U+05D9U+05D3 U+05E2U+05DC U+05D4U+05DEU+05E7U+05E9U+05D9U+05DD i U+05D5-e U+05DBU+05D3U+05D9 U+05E9U+05EAU+05D5U+05DBU+05DCU+05D5 U+05DCU+05E2U+05E0U+05D5U+05EA U+05DEU+05D4U+05E8." center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 30 174 "U+05E9U+05EAU+05D9 U+05DBU+05D5U+05EAU+05E8U+05D5U+05EA U+05D1U+05E8U+05D0U+05E9 U+05D4U+05DEU+05E1U+05DA U+05D9U+05D5U+05E8U+05D5 U+05DCU+05DBU+05DD U+05D0U+05D9U+05DCU+05D5 U+05DEU+05D9U+05DCU+05D9U+05DD U+05D0U+05D5 U+05EAU+05DEU+05D5U+05E0U+05D5U+05EA U+05DEU+05EAU+05D0U+05D9U+05DEU+05D5U+05EA U+05DCU+05DBU+05DC U+05DEU+05E7U+05E9." center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 88 204 "U+05DBU+05DC U+05D2U+05D9U+05E8U+05D5U+05D9 U+05DEU+05EAU+05D0U+05D9U+05DD U+05DCU+05E7U+05D8U+05D2U+05D5U+05E8U+05D9U+05D4 U+05D0U+05D7U+05EA U+05D1U+05DCU+05D1U+05D3, U+05D5U+05DCU+05E8U+05D5U+05D1 U+05E7U+05DC U+05DCU+05DEU+05E6U+05D5U+05D0 U+05D0U+05D5U+05EAU+05D4." center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 45 234 "U+05DEU+05D9U+05D9U+05E0U+05D5 U+05D0U+05EA U+05D4U+05DEU+05D9U+05DCU+05D9U+05DD U+05D1U+05D4U+05EAU+05D0U+05DD U+05DCU+05E7U+05D8U+05D2U+05D5U+05E8U+05D9U+05D4 U+05E9U+05D0U+05DCU+05D9U+05D4 U+05D4U+05DF U+05E9U+05D9U+05D9U+05DBU+05D5U+05EA. U+05DEU+05D9U+05DCU+05D9U+05DD U+05D4U+05E6U+05D1U+05D5U+05E2U+05D5U+05EA U+05D1U+05DCU+05D1U+05DF" center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 37 264 "U+05DEU+05EAU+05D0U+05D9U+05DEU+05D5U+05EA U+05DCU+05DBU+05D5U+05EAU+05E8U+05D5U+05EA U+05D1U+05DCU+05D1U+05DF, U+05D5U+05DEU+05D9U+05DCU+05D9U+05DD U+05D4U+05E6U+05D1U+05D5U+05E2U+05D5U+05EA U+05D1U+05EAU+05DBU+05DCU+05EA U+05DEU+05EAU+05D0U+05D9U+05DEU+05D5U+05EA U+05DCU+05DBU+05D5U+05EAU+05E8U+05D5U+05EA U+05D1U+05EAU+05DBU+05DCU+05EA." center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 221 294 "U+05D4U+05E9U+05EAU+05D3U+05DCU+05D5 U+05DCU+05E2U+05E0U+05D5U+05EA U+05DEU+05D4U+05E8 U+05DBU+05DBU+05DC U+05D4U+05E0U+05D9U+05EAU+05DF." center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline -320 372 "U+05DCU+05D4U+05DEU+05E9U+05DA, U+05DCU+05D7U+05E5/U+05D9 U+05E2U+05DC U+05DEU+05E7U+05E9 U+05D4U+05E8U+05D5U+05D5U+05D7" center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw image -192 -32 "young.JPG" scale=0.3 center=0 z_index=0 show_if="[ys] = 1"
	draw image -320 -32 "young-bw.jpg" scale=0.3 center=0 z_index=0 show_if="[ys] = 1"
	draw image -192 -32 "old.JPG" scale=0.3 center=0 z_index=0 show_if="[ys] = 0"
	draw image -320 -32 "old-bw.jpg" scale=0.3 center=0 z_index=0 show_if="[ys] = 0"

define sequence IAT_seq
	run IAT_inst1_fb "always"
	run spacer "always"
	run _IAT_inst2 "always"
	run spacer "always"
	run practice_loop "always"
	run end_of_practice "always"
	run spacer "always"
	run IAT_Blocks_loop "always"

define sequence Imp_Exp
	run ST_IAT "always"
	run Questionnaires "[impf] = 1"

define loop Implicit_loop
	set break_if "never"
	set column_order ""
	set cycles "3"
	set item "Implicit_seq"
	set order "sequential"
	set repeat "3"
	set skip "0"
	run Implicit_seq

define sequence Implicit_seq
	# run Behav_seq "always"
	run Emo_seq "[b1] = [count_Implicit_seq]"
	run Behav_seq "[b2] = [count_Implicit_seq]"
	run Cog_seq "[b3] = [count_Implicit_seq]"

define feedback Inst_block_pictures_fb
	set description "Block inst"
	set duration "0"
	set reset_variables "no"
	set start_response_interval "no"
	draw textline 0 -252 "U+05D1U+05D1U+05DCU+05D5U+05E7 U+05D4U+05D6U+05D4 U+05D4U+05E7U+05D8U+05D2U+05D5U+05E8U+05D9U+05D5U+05EA U+05D4U+05DF:" center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 250 -222 "U+05D7U+05D9U+05D5U+05D1U+05D9" center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 -222 "U+05DEU+05D5U+05DC" center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline -250 -222 "U+05E9U+05DCU+05D9U+05DCU+05D9" center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 48 "U+05DCU+05D7U+05E6U+05D5 U+05E2U+05DC U+05D4U+05DEU+05E7U+05E9 'e' U+05D0U+05DD U+05D4U+05D2U+05D9U+05E8U+05D5U+05D9 U+05E9U+05D9U+05D9U+05DA U+05DCU+05E7U+05D8U+05D2U+05D5U+05E8U+05D9U+05D4  U+05DEU+05E9U+05DEU+05D0U+05DC" center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 78 "U+05DCU+05D7U+05E6U+05D5 U+05E2U+05DC U+05D4U+05DEU+05E7U+05E9 'i' U+05D0U+05DD U+05D4U+05D2U+05D9U+05E8U+05D5U+05D9 U+05E9U+05D9U+05D9U+05DA U+05DCU+05E7U+05D8U+05D2U+05D5U+05E8U+05D9U+05D4 U+05DEU+05D9U+05DEU+05D9U+05DF" center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline -320 372 "U+05DCU+05D4U+05DEU+05E9U+05DA, U+05DCU+05D7U+05E5/U+05D9 U+05E2U+05DC U+05DEU+05E7U+05E9 U+05D4U+05E8U+05D5U+05D5U+05D7" center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline -256 -192 "[left_cat]" center=1 color="#00ffff" font_family="hebrew" font_size=24 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 256 -192 "[right_cat]" center=1 color="#00ffff" font_family="hebrew" font_size=24 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"

define inline_script Practice
	set _prepare ""
	___run__
	stim_words = []
	sara_n = []
	positive_n = []
	negative_n = []
	
	#Where is Sara?
	#Sara is nowhere
	sara_loc = "none"
	
	
	#create Positive list of 10 stimuli
	positive_n.extend(positive)
	#len(positive_n) == 4
	positive_n.extend(positive)
	#len(positive_n) == 8
	positive_n.extend(random.sample(positive, 2))
	#len(positive_n) == 10
	
	#create Negative list of 10 stimuli
	negative_n.extend(negative)
	#len(negative_n) == 4
	negative_n.extend(negative)
	#len(negative_n) == 8
	negative_n.extend(random.sample(negative, 2))
	#len(negative_n) == 10
	
	#create Sara list of 0 stimuli
	
	
	#create and shuffle joint stimuli list
	random.shuffle(positive_n)
	random.shuffle(negative_n)
	random.shuffle(sara_n)
	stim_words.extend(positive_n)
	stim_words.extend(negative_n)
	stim_words.extend(sara_n)
	random.shuffle(stim_words)
	
	#create iterator
	i = 0
	
	#store length of stimuli list for repeat count
	exp.set("stim_len",len(stim_words))
	
	#store location of Sara for correct_response, and category labels
	if sara_loc == "right":
		exp.set("left_cat","")
		exp.set("right_cat",u'U+05E9U+05E8U+05D4')
		sara_correct = "i"
	elif sara_loc == "left":
		exp.set("left_cat",u'U+05E9U+05E8U+05D4')
		exp.set("right_cat","")
		sara_correct = "e"
	else:
		exp.set("left_cat","")
		exp.set("right_cat","")
		sara_correct = " "
	__end__

define feedback Practice_Inst_block_pictures_fb
	set description "Block inst"
	set duration "keypress"
	set reset_variables "no"
	set start_response_interval "no"
	draw textline 0 -252 "U+05D1U+05D1U+05DCU+05D5U+05E7 U+05D4U+05D6U+05D4 U+05D4U+05E7U+05D8U+05D2U+05D5U+05E8U+05D9U+05D5U+05EA U+05D4U+05DF:" center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 250 -222 "U+05D7U+05D9U+05D5U+05D1U+05D9" center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 -222 "U+05DEU+05D5U+05DC" center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline -250 -222 "U+05E9U+05DCU+05D9U+05DCU+05D9" center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 -132 "U+05D2U+05D9U+05E8U+05D5U+05D9U+05D9U+05DD U+05E9U+05E9U+05D9U+05D9U+05DBU+05D9U+05DD U+05DCU+05E7U+05D8U+05D2U+05D5U+05E8U+05D9U+05D4 'U+05D7U+05D9U+05D5U+05D1U+05D9':" center=1 color="white" font_family="Alef" font_size=21 font_bold="YES" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 -102 "[p1], [p2], [p3], [p4]" center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 -42 "U+05D2U+05D9U+05E8U+05D5U+05D9U+05D9U+05DD U+05E9U+05E9U+05D9U+05D9U+05DBU+05D9U+05DD U+05DCU+05E7U+05D8U+05D2U+05D5U+05E8U+05D9U+05D4 'U+05E9U+05DCU+05D9U+05DCU+05D9':" center=1 color="white" font_family="Alef" font_size=21 font_bold="YESshow_if=always" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 -12 "[n1], [n2], [n3], [n4]" center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 48 "U+05DCU+05D7U+05E6U+05D5 U+05E2U+05DC U+05D4U+05DEU+05E7U+05E9 'e' U+05D0U+05DD U+05D4U+05D2U+05D9U+05E8U+05D5U+05D9 U+05E9U+05D9U+05D9U+05DA U+05DCU+05E7U+05D8U+05D2U+05D5U+05E8U+05D9U+05D4  U+05E9U+05DCU+05D9U+05DCU+05D9" center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 78 "U+05DCU+05D7U+05E6U+05D5 U+05E2U+05DC U+05D4U+05DEU+05E7U+05E9 'i' U+05D0U+05DD U+05D4U+05D2U+05D9U+05E8U+05D5U+05D9 U+05E9U+05D9U+05D9U+05DA U+05DCU+05E7U+05D8U+05D2U+05D5U+05E8U+05D9U+05D4 U+05D7U+05D9U+05D5U+05D1U+05D9" center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline -320 372 "U+05DCU+05D4U+05DEU+05E9U+05DA, U+05DCU+05D7U+05E5/U+05D9 U+05E2U+05DC U+05DEU+05E7U+05E9 U+05D4U+05E8U+05D5U+05D5U+05D7" center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"

define sequence Practice_block_sequence
	set description "A sequence containing a single block of trials followed by feedback to the participant"
	set flush_keyboard "yes"
	run Practice "always"
	run Practice_Inst_block_pictures_fb "always"
	run reset_feedback "always"
	run block_loop "always"

define sequence Questionnaires
	run explicit_qualtrics "always"

define sequence SET_ENG
	run askY "always"
	run askY_keyboard_response "always"
	run Check_ENG "always"
	run askY_second "[eng_set]=0"
	run askY_second_keyboard_response "[eng_set]=0"

define sequence ST_IAT
	run young_seq "[ys] = 1"
	run old_seq "[ys] = 0"

define sequence Sara_left_block_sequence
	set description "A sequence containing a single block of trials followed by feedback to the participant"
	set flush_keyboard "yes"
	run Block_left "always"
	run Inst_block_pictures_fb "always"
	run spacer "always"
	run reset_feedback "always"
	run block_loop "always"

define sequence Sara_right_block_sequence
	set description "A sequence containing a single block of trials followed by feedback to the participant"
	set flush_keyboard "yes"
	run Block_right "always"
	run Inst_block_pictures_fb "always"
	run spacer "always"
	run reset_feedback "always"
	run block_loop "always"

define sequence _Demographics
	run Def_functions "always"
	run Demographics "always"

define sketchpad _IAT_inst2
	set description "General Instruction"
	set duration "0"
	set reset_variables "no"
	set start_response_interval "no"
	draw textline 0 -222 "U+05DBU+05D0U+05DEU+05D5U+05E8, U+05E2U+05DCU+05D9U+05DBU+05DD U+05DCU+05DEU+05D9U+05D9U+05DF U+05D0U+05EA U+05D4U+05DEU+05D9U+05DCU+05D9U+05DD U+05D4U+05DEU+05D5U+05E4U+05D9U+05E2U+05D5U+05EA U+05D1U+05DEU+05E8U+05DBU+05D6 U+05D4U+05DEU+05E1U+05DA" center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 -192 "U+05DCU+05D0U+05D7U+05EA U+05DEU+05E9U+05EAU+05D9 U+05D4U+05E7U+05D8U+05D2U+05D5U+05E8U+05D9U+05D5U+05EA U+05D4U+05DEU+05D5U+05E4U+05D9U+05E2U+05D5U+05EA U+05D1U+05E8U+05D0U+05E9 U+05D4U+05DEU+05E1U+05DA" center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 -102 "U+05DBU+05D0U+05E9U+05E8 U+05D4U+05DEU+05D9U+05DCU+05D9U+05DD U+05DEU+05EAU+05D0U+05D9U+05DEU+05D5U+05EA U+05DCU+05E7U+05D8U+05D2U+05D5U+05E8U+05D9U+05D4 U+05DEU+05E9U+05DEU+05D0U+05DC, U+05D4U+05E7U+05D9U+05E9U+05D5 'e'" center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 -72 "U+05DBU+05D0U+05E9U+05E8 U+05D4U+05DEU+05D9U+05DCU+05D9U+05DD U+05DEU+05EAU+05D0U+05D9U+05DEU+05D5U+05EA U+05DCU+05E7U+05D8U+05D2U+05D5U+05E8U+05D9U+05D4 U+05DEU+05D9U+05DEU+05D9U+05DF, U+05D4U+05E7U+05D9U+05E9U+05D5 'i.'" center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 50 "U+05D4U+05DEU+05D9U+05DCU+05D9U+05DD U+05DEU+05EAU+05D0U+05D9U+05DEU+05D5U+05EA U+05E8U+05E7 U+05DCU+05E7U+05D8U+05D2U+05D5U+05E8U+05D9U+05D4 U+05D0U+05D7U+05EA." center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 80 "U+05D0U+05DD U+05EAU+05D1U+05E6U+05E2U+05D5 U+05D8U+05E2U+05D5U+05EA U+05D9U+05D5U+05E4U+05D9U+05E2 U+05E2U+05DC U+05D4U+05DEU+05E1U+05DA" center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 110 "U+05EAU+05E7U+05E0U+05D5 U+05D0U+05EA U+05D4U+05D8U+05E2U+05D5U+05EA U+05D1U+05E2U+05D6U+05E8U+05EA U+05D4U+05DEU+05E7U+05E9 U+05D4U+05D0U+05D7U+05E8" center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline -160 62 "X" center=0 color="red" font_family="Alef" font_size=23 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 138 "U+05D4U+05D2U+05D9U+05D1U+05D5 U+05D1U+05DEU+05D4U+05D9U+05E8U+05D5U+05EA U+05D4U+05D0U+05E4U+05E9U+05E8U+05D9U+05EA U+05D5U+05E0U+05E1U+05D5 U+05DCU+05D4U+05D9U+05DEU+05E0U+05E2 U+05DEU+05D8U+05E2U+05D5U+05D9U+05D5U+05EA." center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline -320 372 "U+05DCU+05D4U+05DEU+05E9U+05DA, U+05DCU+05D7U+05E5/U+05D9 U+05E2U+05DC U+05DEU+05E7U+05E9 U+05D4U+05E8U+05D5U+05D5U+05D7" center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"

define logger _logger

define sketchpad askY
	set duration "0"
	set reset_variables "no"
	draw textline 0 0 "U+05DCU+05D7U+05E5/U+05D9 U+05E2U+05DC 'y' U+05E2U+05DC U+05DEU+05E0U+05EA U+05DCU+05D4U+05DEU+05E9U+05D9U+05DA..." center=1 color="white" font_family="hebrew" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 64 "(U+05D0U+05E0U+05D0 U+05DCU+05D7U+05E5/U+05D9 U+05E4U+05E2U+05DD U+05D0U+05D7U+05EA U+05D5U+05D4U+05DEU+05EAU+05DF/U+05D9)" center=1 color="white" font_family="hebrew" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"

define keyboard_response askY_keyboard_response
	set allowed_responses "y"
	set correct_response "y"
	set flush "yes"
	set timeout "6000"

define sketchpad askY_second
	set duration "0"
	set reset_variables "no"
	draw textline 0 -128 "U+05D0U+05E0U+05D0 U+05D4U+05D7U+05DCU+05E3/U+05D9 U+05D0U+05EA U+05E9U+05E4U+05EA U+05D4U+05DEU+05D7U+05E9U+05D1 U+05DCU+05D0U+05E0U+05D2U+05DCU+05D9U+05EA (Shift+Alt), U+05D5U+05E0U+05E1U+05D4/U+05D9 U+05E9U+05E0U+05D9U+05EA..." center=1 color="#ff0000" font_family="hebrew" font_size=22 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 0 "U+05DCU+05D7U+05E5/U+05D9 U+05E2U+05DC 'y' U+05E2U+05DC U+05DEU+05E0U+05EA U+05DCU+05D4U+05DEU+05E9U+05D9U+05DA..." center=1 color="white" font_family="hebrew" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 64 "(U+05D0U+05E0U+05D0 U+05DCU+05D7U+05E5/U+05D9 U+05E4U+05E2U+05DD U+05D0U+05D7U+05EA U+05D5U+05D4U+05DEU+05EAU+05DF/U+05D9)" center=1 color="white" font_family="hebrew" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"

define keyboard_response askY_second_keyboard_response
	set allowed_responses "y"
	set correct_response "y"
	set flush "yes"
	set timeout "infinite"

define loop block_loop
	set break_if "never"
	set column_order "stim_picture"
	set cycles "1"
	set description "A single block of trials"
	set item "trial_sequence"
	set order "random"
	set repeat "[stim_len]"
	setcycle 0 stim_picture "empty.png"
	run trial_sequence

define inline_script check_for_second_chance
	set _prepare ""
	___run__
	# First, check whether the response was correct by using the
	# built-in OpenSesame variable 'correct', It has the
	# value 1 if the most recent response was correct, and the
	# value 0 if it was incorrect.
	# We retrieve this variable by using the experiment function
	# 'self.get()'.
	# If the response was correct, we DON'T need to run the 'second
	# chance' items:
	
	# If the response was correct, we DON'T need to run the 'second
	# chance' items:
	if self.get("correct") == 1:
		exp.set("second_chance", 'no')
	
	# If the response was incorrect, we DO need to run the 'second
	# chance items:
	elif self.get("correct") == 0:
		exp.set("second_chance", 'yes')
	__end__
	set description "Executes Python code"

define sketchpad end_of_experiment
	set description "A sketchpad notifying the participant that the experiment is finished"
	set duration "keypress"
	set reset_variables "no"
	set start_response_interval "no"
	draw textline 0 0 "U+05E1U+05D5U+05E3 U+05D4U+05E0U+05D9U+05E1U+05D5U+05D9" center=1 color="white" font_family="alef" font_size=24 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"

define sketchpad end_of_practice
	set description "A sketchpad notifying the participant that the practice phase is finished"
	set duration "0"
	set reset_variables "no"
	set start_response_interval "no"
	draw textline 0 -288 "U+05E9U+05D9U+05DEU+05D5 U+05DCU+05D1, <br />U+05DBU+05E2U+05EA U+05D4U+05E7U+05D8U+05D2U+05D5U+05E8U+05D9U+05D5U+05EA U+05D1U+05E8U+05D0U+05E9 U+05D4U+05DEU+05E1U+05DA U+05DEU+05EAU+05D7U+05DCU+05E4U+05D5U+05EA, U+05D0U+05D1U+05DC U+05DBU+05DCU+05DCU+05D9 U+05D4U+05DEU+05E9U+05D9U+05DEU+05D4 U+05E0U+05E9U+05D0U+05E8U+05D9U+05DD U+05D6U+05D4U+05D9U+05DD:<br />" center=1 color="white" font_family="Alef" font_size=24 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 -222 "U+05E2U+05DCU+05D9U+05DBU+05DD U+05DCU+05DEU+05D9U+05D9U+05DF U+05D0U+05EA U+05D4U+05DEU+05D9U+05DCU+05D9U+05DD U+05D4U+05DEU+05D5U+05E4U+05D9U+05E2U+05D5U+05EA U+05D1U+05DEU+05E8U+05DBU+05D6 U+05D4U+05DEU+05E1U+05DA" center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 -192 "U+05DCU+05D0U+05D7U+05EA U+05DEU+05E9U+05EAU+05D9 U+05D4U+05E7U+05D8U+05D2U+05D5U+05E8U+05D9U+05D5U+05EA U+05D4U+05DEU+05D5U+05E4U+05D9U+05E2U+05D5U+05EA U+05D1U+05E8U+05D0U+05E9 U+05D4U+05DEU+05E1U+05DA" center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 -102 "U+05DBU+05D0U+05E9U+05E8 U+05D4U+05DEU+05D9U+05DCU+05D9U+05DD U+05DEU+05EAU+05D0U+05D9U+05DEU+05D5U+05EA U+05DCU+05E7U+05D8U+05D2U+05D5U+05E8U+05D9U+05D4 U+05DEU+05E9U+05DEU+05D0U+05DC, U+05D4U+05E7U+05D9U+05E9U+05D5 'e'" center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 -72 "U+05DBU+05D0U+05E9U+05E8 U+05D4U+05DEU+05D9U+05DCU+05D9U+05DD U+05DEU+05EAU+05D0U+05D9U+05DEU+05D5U+05EA U+05DCU+05E7U+05D8U+05D2U+05D5U+05E8U+05D9U+05D4 U+05DEU+05D9U+05DEU+05D9U+05DF, U+05D4U+05E7U+05D9U+05E9U+05D5 'i.'" center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 50 "U+05D4U+05DEU+05D9U+05DCU+05D9U+05DD U+05DEU+05EAU+05D0U+05D9U+05DEU+05D5U+05EA U+05E8U+05E7 U+05DCU+05E7U+05D8U+05D2U+05D5U+05E8U+05D9U+05D4 U+05D0U+05D7U+05EA." center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 80 "U+05D0U+05DD U+05EAU+05D1U+05E6U+05E2U+05D5 U+05D8U+05E2U+05D5U+05EA U+05D9U+05D5U+05E4U+05D9U+05E2 U+05E2U+05DC U+05D4U+05DEU+05E1U+05DA" center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 110 "U+05EAU+05E7U+05E0U+05D5 U+05D0U+05EA U+05D4U+05D8U+05E2U+05D5U+05EA U+05D1U+05E2U+05D6U+05E8U+05EA U+05D4U+05DEU+05E7U+05E9 U+05D4U+05D0U+05D7U+05E8" center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline -160 62 "X" center=0 color="red" font_family="Alef" font_size=23 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 138 "U+05D4U+05D2U+05D9U+05D1U+05D5 U+05D1U+05DEU+05D4U+05D9U+05E8U+05D5U+05EA U+05D4U+05D0U+05E4U+05E9U+05E8U+05D9U+05EA U+05D5U+05E0U+05E1U+05D5 U+05DCU+05D4U+05D9U+05DEU+05E0U+05E2 U+05DEU+05D8U+05E2U+05D5U+05D9U+05D5U+05EA." center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline -320 372 "U+05DCU+05D4U+05DEU+05E9U+05DA, U+05DCU+05D7U+05E5/U+05D9 U+05E2U+05DC U+05DEU+05E7U+05E9 U+05D4U+05E8U+05D5U+05D5U+05D7" center=1 color="white" font_family="Alef" font_size=21 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"

define sequence experiment
	set description "The main sequence of the experiment"
	set flush_keyboard "yes"
	run set_order_by_Sub_nr "always"
	run _Demographics "always"
	run SET_ENG "always"
	run Imp_Exp "always"
	run end_of_experiment "always"

define inline_script explicit_qualtrics
	set _prepare ""
	___run__
	#qualIE = subprocess.Popen('"C:\\Program Files\\Internet Explorer\\iexplore.exe" -k  https://bgupsych.eu.qualtrics.com/SE/?SID=SV_3I2VDwTJGYEEAVT&subj=' + str(self.get('subject_nr')) + '&ys=' + str(self.get('ys')) + '&impf=' + str(self.get('impf')))
	#sleep(2)
	#subprocess.Popen(NirPath + ' win activate title "qualtrics"')
	#
	#existReps = 0
	##while(processExists('iexplore.exe')):
	##	sleep(1)
	##	print(existReps)
	##	existReps = existReps + 1
	##	print('process is running!')
	##print('process not running!')
	##subprocess.Popen(NirPath + ' win activate title "Backend"')
	#
	__end__

define keyboard_response first_chance_response
	set allowed_responses "i;e"
	set description "Collects keyboard responses"
	set flush "yes"
	set timeout "infinite"

define sketchpad first_chance_stim
	set description "Displays stimuli"
	set duration "0"
	set reset_variables "no"
	set start_response_interval "no"
	draw textline 256 -192 "U+05D7U+05D9U+05D5U+05D1U+05D9" center=1 color="white" font_family="hebrew" font_size=28 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline -256 -192 "U+05E9U+05DCU+05D9U+05DCU+05D9" center=1 color="white" font_family="hebrew" font_size=28 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 0 "[stim_word]" center=1 color="white" font_family="hebrew" font_size=32 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="[stim_word] != none"
	draw image 0 0 "[stim_picture]" scale=0.5 center=1 z_index=0 show_if="always"
	draw textline -256 -160 "[left_cat]" center=1 color="#00ffff" font_family="hebrew" font_size=28 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 256 -160 "[right_cat]" center=1 color="#00ffff" font_family="hebrew" font_size=28 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"

define inline_script init_Behav
	set _prepare ""
	___run__
	positive = [u'U+05DCU+05E2U+05D6U+05D5U+05E8',u'U+05DCU+05D7U+05D1U+05E7',u'U+05DCU+05D4U+05EAU+05E7U+05E8U+05D1',u'U+05DCU+05D8U+05E4U+05DC']
	negative = [u'U+05DCU+05D4U+05D9U+05DEU+05E0U+05E2',u'U+05DCU+05DBU+05E4U+05D5U+05EA',u'U+05DCU+05D4U+05E4U+05E8U+05D9U+05D3',u'U+05DCU+05D3U+05D7U+05D5U+05EA']
	exp.set("p1", positive[0])
	exp.set("p2", positive[1])
	exp.set("p3", positive[2])
	exp.set("p4", positive[3])
	exp.set("n1", negative[0])
	exp.set("n2", negative[1])
	exp.set("n3", negative[2])
	exp.set("n4", negative[3])
	__end__

define inline_script init_Emo
	set _prepare ""
	___run__
	positive = [u'U+05E1U+05D9U+05DEU+05E4U+05D8U+05D9U+05D4',u'U+05E8U+05E6U+05D5U+05DF U+05DCU+05E2U+05D6U+05D5U+05E8',u'U+05D0U+05D4U+05D3U+05D4',u'U+05D0U+05D4U+05D1U+05D4']
	negative = [u'U+05DBU+05E2U+05E1',u'U+05E4U+05D7U+05D3',u'U+05D1U+05D5U+05E9U+05D4',u'U+05D2U+05D5U+05E2U+05DC']
	exp.set("p1", positive[0])
	exp.set("p2", positive[1])
	exp.set("p3", positive[2])
	exp.set("p4", positive[3])
	exp.set("n1", negative[0])
	exp.set("n2", negative[1])
	exp.set("n3", negative[2])
	exp.set("n4", negative[3])
	__end__

define inline_script init_cog
	set _prepare ""
	___run__
	positive = [u'U+05D1U+05D9U+05D8U+05D7U+05D5U+05DF',u'U+05D4U+05E2U+05E8U+05E6U+05D4',u'U+05DEU+05E1U+05D5U+05D2U+05DCU+05D5U+05EA',u'U+05D7U+05D5U+05D6U+05E7']
	negative = [u'U+05D0U+05D9U+05D5U+05DD',u'U+05E1U+05DBU+05E0U+05D4',u'U+05D0U+05E9U+05DEU+05D4',u'U+05DEU+05D7U+05DCU+05D4 U+05D7U+05DEU+05D5U+05E8U+05D4']
	exp.set("p1", positive[0])
	exp.set("p2", positive[1])
	exp.set("p3", positive[2])
	exp.set("p4", positive[3])
	exp.set("n1", negative[0])
	exp.set("n2", negative[1])
	exp.set("n3", negative[2])
	exp.set("n4", negative[3])
	__end__

define inline_script init_old
	set _prepare ""
	___run__
	import random
	sara = [u'U+05D7U+05D5U+05DCU+05EA U+05D0U+05DCU+05E6U+05D4U+05D9U+05D9U+05DEU+05E8',u'U+05E9U+05E8U+05D4','old','old-bw']
	__end__

define inline_script init_young
	___prepare__
	import random
	sara = [u'U+05D7U+05D5U+05DCU+05EA U+05D0U+05DCU+05E6U+05D4U+05D9U+05D9U+05DEU+05E8',u'U+05E9U+05E8U+05D4','young','young-bw']
	__end__
	set _run ""

define sequence old_seq
	run init_old "always"
	run Implicit_loop "always"

define loop practice_loop
	set break_if "never"
	set column_order "practice"
	set cycles "1"
	set description "A loop containing one or more practice blocks"
	set item "Practice_block_sequence"
	set order "random"
	set repeat "1"
	setcycle 0 practice "yes"
	run Practice_block_sequence

define inline_script prepare_stimuli
	___prepare__
	if stim_words[i] in positive:
		exp.set("correct_response",'i')
	elif stim_words[i] in negative:
		exp.set("correct_response",'e')
	elif stim_words[i] in sara:
		exp.set("correct_response",sara_correct)
		
	
	#display pictures, remove word stimuli
	if stim_words[i] == u'young':
		exp.set("stim_picture",'young.jpg')
		stim_words[i] = ''	
	elif stim_words[i] == u'young-bw':
		exp.set("stim_picture",'young-bw.jpg')
		stim_words[i] = ''
	elif stim_words[i] == u'old':
		exp.set("stim_picture",'old.jpg')
		stim_words[i] = ''
	elif stim_words[i] == u'old-bw':
		exp.set("stim_picture",'old-bw.jpg')
		stim_words[i] = ''
		
	
	exp.set("stim_word",stim_words[i])
	
	#this should be last
	if i < len(stim_words):
		i = i + 1
	__end__
	set _run ""

define reset_feedback reset_feedback

define keyboard_response second_chance_response
	set allowed_responses "[correct_response]"
	set description "Collects keyboard responses"
	set flush "yes"
	set timeout "infinite"

define sketchpad second_chance_stim
	set description "Displays stimuli"
	set duration "0"
	set reset_variables "no"
	set start_response_interval "no"
	draw textline 256 -192 "U+05D7U+05D9U+05D5U+05D1U+05D9" center=1 color="white" font_family="hebrew" font_size=28 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline -256 -192 "U+05E9U+05DCU+05D9U+05DCU+05D9" center=1 color="white" font_family="hebrew" font_size=28 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 208 "X" center=1 color="red" font_family="mono" font_size=38 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 0 "[stim_word]" center=1 color="white" font_family="hebrew" font_size=32 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="[stim_word] != none"
	draw image 0 0 "[stim_picture]" scale=0.5 center=1 z_index=0 show_if="always"
	draw textline -256 -160 "[left_cat]" center=1 color="#00ffff" font_family="hebrew" font_size=28 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 256 -160 "[right_cat]" center=1 color="#00ffff" font_family="hebrew" font_size=28 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"

define inline_script set_order_by_Sub_nr
	___prepare__
	#(within subjects)set order of IAT tasks by modulo of 3
	if self.get('subject_nr')%3 == 1:
		cog = 1
		emo = 2
		behav = 3
	elif self.get('subject_nr')%3 == 2:
		cog = 3
		emo = 1
		behav = 2
	else:
		cog = 2
		emo = 3
		behav = 1
	exp.set('b1',emo - 1)
	exp.set('b2',behav - 1)
	exp.set('b3',cog - 1)
	
	#(between subjects) set order of implicit-explicit, IAT blocks, and young/old by modulo of 8
	if self.get('subject_nr')%8 == 1:
		young_seq_show = 0
		positive_first = 0
		implicit_first = 0
	elif self.get('subject_nr')%8 == 2:
		young_seq_show = 0
		positive_first = 1
		implicit_first = 0
	elif self.get('subject_nr')%8 == 3:
		young_seq_show = 1
		positive_first = 0
		implicit_first = 0
	elif self.get('subject_nr')%8 == 4:
		young_seq_show = 1
		positive_first = 1
		implicit_first = 0
	elif self.get('subject_nr')%8 == 5:
		young_seq_show = 0
		positive_first = 0
		implicit_first = 1
	elif self.get('subject_nr')%8 == 6:
		young_seq_show = 0
		positive_first = 1
		implicit_first = 1
	elif self.get('subject_nr')%8 == 7:
		young_seq_show = 1
		positive_first = 0
		implicit_first = 1
	else:
		young_seq_show = 1
		positive_first = 1
		implicit_first = 1
	
	exp.set('ys',young_seq_show)
	exp.set('pf',positive_first)
	exp.set('impf',implicit_first)
	
	
	#print("sub_nr is:" + str(self.get('subject_nr')))
	#print("young_seq_show is:")
	#print(self.get('ys'))
	#print("positive_first is:")
	#print(self.get('pf'))
	#print("implicit_first is:")
	#print(self.get('impf'))
	
	#print("cog is:")
	#print(self.get('b3'))
	#print("emo is:")
	#print(self.get('b1'))
	#print("behav is:")
	#print(self.get('b2'))
	__end__
	set _run ""
	set description "Executes Python code"

define keyboard_response spacer
	set allowed_responses "space"
	set flush "yes"
	set timeout "infinite"

define sequence trial_sequence
	set description "A single trial"
	set flush_keyboard "yes"
	run prepare_stimuli "always"
	run Fixation "always"
	run first_chance_stim "always"
	run first_chance_response "always"
	run check_for_second_chance "always"
	run second_chance_stim "[second_chance]=yes"
	run second_chance_response "[second_chance]=yes"
	run _logger "always"

define sequence young_seq
	run init_young "always"
	run Implicit_loop "always"

